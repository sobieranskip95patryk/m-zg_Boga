version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: hhu_database
    environment:
      POSTGRES_DB: hiphop
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - hhu_network

  # Local Hardhat Node
  hardhat:
    image: node:18-alpine
    container_name: hhu_hardhat
    working_dir: /app
    volumes:
      - ./contracts:/app
      - hardhat_cache:/app/cache
      - hardhat_artifacts:/app/artifacts
    command: sh -c "npm ci && npx hardhat node --hostname 0.0.0.0"
    ports:
      - "8545:8545"
    environment:
      - NODE_ENV=development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8545"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - hhu_network

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: hhu_backend
    environment:
      NODE_ENV: development
      PORT: 4000
      DATABASE_URL: postgres://postgres:postgres@db:5432/hiphop
      RPC_URL: http://hardhat:8545
      DEPLOYER_PRIVATE_KEY: ${DEPLOYER_PRIVATE_KEY:-0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80}
      CONTRACT_ADDRESS: ${CONTRACT_ADDRESS:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
    depends_on:
      db:
        condition: service_healthy
      hardhat:
        condition: service_started
    ports:
      - "4000:4000"
    restart: unless-stopped
    networks:
      - hhu_network

  # Frontend (development)
  frontend:
    image: node:18-alpine
    container_name: hhu_frontend
    working_dir: /app
    volumes:
      - ./frontend:/app
      - frontend_modules:/app/node_modules
    command: sh -c "npm ci && npm run dev -- --host 0.0.0.0"
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:4000
      - REACT_APP_CHAIN_ID=31337
    depends_on:
      - backend
    networks:
      - hhu_network

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: hhu_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - hhu_network

  # Nginx (reverse proxy for production)
  nginx:
    image: nginx:alpine
    container_name: hhu_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - hhu_network
    profiles:
      - production

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
  hardhat_cache:
    driver: local
  hardhat_artifacts:
    driver: local
  frontend_modules:
    driver: local

networks:
  hhu_network:
    driver: bridge

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up